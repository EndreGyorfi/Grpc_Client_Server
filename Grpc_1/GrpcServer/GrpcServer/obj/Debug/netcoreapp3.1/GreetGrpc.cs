// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcServer {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Chat
  {
    static readonly string __ServiceName = "chatPackage.Chat";

    static readonly grpc::Marshaller<global::GrpcServer.PublicMessageRequest> __Marshaller_chatPackage_PublicMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.PublicMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.PublicMessageReply> __Marshaller_chatPackage_PublicMessageReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.PublicMessageReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.LoginRequest> __Marshaller_chatPackage_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.LoginReply> __Marshaller_chatPackage_LoginReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.LoginReply.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcServer.PublicMessageRequest, global::GrpcServer.PublicMessageReply> __Method_SendPublicMessage = new grpc::Method<global::GrpcServer.PublicMessageRequest, global::GrpcServer.PublicMessageReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendPublicMessage",
        __Marshaller_chatPackage_PublicMessageRequest,
        __Marshaller_chatPackage_PublicMessageReply);

    static readonly grpc::Method<global::GrpcServer.LoginRequest, global::GrpcServer.LoginReply> __Method_SendLoginMessage = new grpc::Method<global::GrpcServer.LoginRequest, global::GrpcServer.LoginReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendLoginMessage",
        __Marshaller_chatPackage_LoginRequest,
        __Marshaller_chatPackage_LoginReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcServer.GreetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Chat</summary>
    [grpc::BindServiceMethod(typeof(Chat), "BindService")]
    public abstract partial class ChatBase
    {
      /// <summary>
      /// Sends public message
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcServer.PublicMessageReply> SendPublicMessage(global::GrpcServer.PublicMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcServer.LoginReply> SendLoginMessage(global::GrpcServer.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendPublicMessage, serviceImpl.SendPublicMessage)
          .AddMethod(__Method_SendLoginMessage, serviceImpl.SendLoginMessage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SendPublicMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcServer.PublicMessageRequest, global::GrpcServer.PublicMessageReply>(serviceImpl.SendPublicMessage));
      serviceBinder.AddMethod(__Method_SendLoginMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcServer.LoginRequest, global::GrpcServer.LoginReply>(serviceImpl.SendLoginMessage));
    }

  }
}
#endregion
